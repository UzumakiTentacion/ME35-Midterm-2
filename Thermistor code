##THERMISTOR CODE##

import uasyncio as asyncio
import machine
import math
from mqtt import MQTTClient
import MT2secret  # Import the MT2secret module

# Define your Adafruit IO feed key
AIO_USERNAME = MT2secret.AIO_USERNAME
AIO_KEY = MT2secret.AIO_KEY
ADAFRUIT_IO_MQTT_BROKER = MT2secret.ADAFRUIT_IO_MQTT_BROKER
ADAFRUIT_IO_MQTT_PORT = MT2secret.ADAFRUIT_IO_MQTT_PORT
MQTT_TOPIC = MT2secret.MQTT_TOPIC

# Connect the thermistor to an analog pin (e.g., GP27)
thermistor_pin = machine.ADC(27)  # Change to the appropriate pin number

# Connect LEDs to GPIO pins
led_pins = [10, 11, 12, 13]  # Adjust the pins accordingly

# Known reference values for the thermistor at a reference temperature (T0) and its resistance (R0)
# Update these values according to your thermistor's characteristics
R0 = 10000
T0 = 294
beta = 3950
R_series = 10000

# Function to convert temperature from ADC value to Celsius
def convert_to_celsius(temperature_value):
    Vr = 3.3 * float(temperature_value) / 65535
    Rt = 10000 * Vr / (3.3 - Vr)
    temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))
    return temp - 273.15

# Function to control LEDs based on temperature
def control_leds(temp):
    for i, pin in enumerate(led_pins):
        machine.Pin(pin, machine.Pin.OUT).off()  # Turn off all LEDs

    if temp < 5:
        machine.Pin(led_pins[3], machine.Pin.OUT).on()  # Blue (Winter) LED on
    elif 5 <= temp < 15:
        machine.Pin(led_pins[2], machine.Pin.OUT).on()  # Orange (Autumn) LED on
    elif 15 <= temp < 26:
        machine.Pin(led_pins[1], machine.Pin.OUT).on()  # Green (Spring) LED on
    else:
        machine.Pin(led_pins[0], machine.Pin.OUT).on()  # Red (Summer) LED on

# Function to convert temperature from Celsius to Fahrenheit
def celsius_to_fahrenheit(celsius_temp):
    return (celsius_temp * 9/5) + 32

# Function to send temperature data (both Celsius and Fahrenheit) to Adafruit IO
def send_to_adafruit_io(topic, message):
    mqtt_client.publish(topic, message)

# Create an MQTT client
mqtt_client = MQTTClient(
    client_id="Makaveli",
    server=MT2secret.ADAFRUIT_IO_MQTT_BROKER,
    port=MT2secret.ADAFRUIT_IO_MQTT_PORT,
    user=MT2secret.AIO_USERNAME,
    password=MT2secret.AIO_KEY
)

async def read_temperature():
    try:
        while True:
            try:
                temperature_value = thermistor_pin.read_u16()
                print("Raw temperature:", temperature_value)
                temperature_Cel = convert_to_celsius(temperature_value)
                temperature_Fah = celsius_to_fahrenheit(temperature_Cel)

                print('Celsius: {:.2f} C Fahrenheit: {:.2f} F'.format(temperature_Cel, temperature_Fah))

                control_leds(temperature_Cel)  # Control LEDs based on temperature

                # Connect to the Adafruit IO MQTT broker
                mqtt_client.connect()
                print("Connected to Adafruit IO MQTT")

                color_seen = "Red"  # Define color_seen appropriately

                if color_seen == "Red":
                    # Publish the temperature reading in Celsius to the Adafruit IO feed
                     mqtt_client.publish(MT2secret.MQTT_TOPIC, str(temperature_Cel))
                     print(f"Published Celsius temperature: {temperature_Cel}°C")
                else:
                    # Publish the temperature reading in Fahrenheit (default) to the Adafruit IO feed
                     mqtt_client.publish(MT2secret.MQTT_TOPIC, str(temperature_Fah))
                     print(f"Published Fahrenheit temperature: {temperature_Fah}°F")

                # Disconnect from the Adafruit IO MQTT broker
                mqtt_client.disconnect()

            except Exception as e:
                print(f"Error in read_temperature: {e}")

            await asyncio.sleep(5)  # 5 sec sleep

    except Exception as e:
        print(f"Error in read_temperature main loop: {e}")

           
try:
    print("Connecting to Adafruit IO MQTT broker...")
    mqtt_client.connect()
    print("Connected to Adafruit IO MQTT")
    loop = asyncio.get_event_loop()
    loop.create_task(read_temperature())
    loop.run_forever()
except KeyboardInterrupt:
    print("Program stopped by the user")
finally:
    # Turn off all LEDs when the program ends
    for pin in led_pins:
        machine.Pin(pin, machine.Pin.OUT).off()
